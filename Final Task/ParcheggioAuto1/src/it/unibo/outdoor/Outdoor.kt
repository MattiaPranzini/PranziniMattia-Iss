/* Generated by AN DISI Unibo */ 
package it.unibo.outdoor

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Outdoor ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var robotLibero = true
				var outdoorLibera = true
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Stato 0 initial")
					}
					 transition(edgeName="t00",targetState="uscita",cond=whenDispatch("uscita"))
				}	 
				state("uscita") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("uscita(token)"), Term.createTerm("uscita(token)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var token = payloadArg(0)  
						}
						 robotLibero = false  
						println("Robot occupato, carica auto e la sposta in uscita.")
						delay(500) 
					}
					 transition( edgeName="goto",targetState="outdoor", cond=doswitch() )
				}	 
				state("outdoor") { //this:State
					action { //it:State
						
									var robotLibero = true
									var outdoorLibera = false
						println("Robot libero, uscita occupata")
						delay(500) 
					}
					 transition( edgeName="goto",targetState="liberaUscita", cond=doswitch() )
				}	 
				state("liberaUscita") { //this:State
					action { //it:State
						
									var outdoorLibera = true
						println("Robot libero, uscita libera")
					}
				}	 
			}
		}
}
