/* Generated by AN DISI Unibo */ 
package it.unibo.parkmanagerservice

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Parkmanagerservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "moveToHome"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var POSTILIBERI = 6
				var robotLibero = true
				var outdoorLibera = true
				var indoorLibera = true	
				var PROGRESSIVO = 0	
				lateinit var outSonarActor : ActorBasic
		return { //this:ActionBasciFsm
				state("moveToHome") { //this:State
					action { //it:State
						outSonarActor     = sysUtil.getActor("outsonar")!! 
						forward("goto", "goto(home)" ,"parkmanagerservice" ) 
					}
					 transition(edgeName="t00",targetState="acceptin",cond=whenEvent("acceptin"))
					transition(edgeName="t01",targetState="goto",cond=whenDispatch("goto"))
					transition(edgeName="t02",targetState="acceptout",cond=whenRequest("acceptout"))
					transition(edgeName="t03",targetState="uscitalibera",cond=whenEvent("uscitalibera"))
					transition(edgeName="t04",targetState="timeout",cond=whenEvent("timeout"))
				}	 
				state("acceptin") { //this:State
					action { //it:State
						if(  indoorLibera  
						 ){println("Vado in informin")
						forward("informin", "informin" ,"parkmanagerservice" ) 
						}
						else
						 {emit("acceptin", "acceptin" ) 
						 }
					}
					 transition(edgeName="t05",targetState="informin",cond=whenDispatch("informin"))
					transition(edgeName="t06",targetState="acceptin",cond=whenEvent("acceptin"))
					transition(edgeName="t07",targetState="uscitalibera",cond=whenEvent("uscitalibera"))
					transition(edgeName="t08",targetState="timeout",cond=whenEvent("timeout"))
				}	 
				state("informin") { //this:State
					action { //it:State
						forward("slotsnum", "slotsnum($POSTILIBERI)" ,"cliente" ) 
					}
					 transition(edgeName="t09",targetState="movetoin",cond=whenRequest("carenter"))
					transition(edgeName="t010",targetState="uscitalibera",cond=whenEvent("uscitalibera"))
					transition(edgeName="t011",targetState="timeout",cond=whenEvent("timeout"))
				}	 
				state("movetoin") { //this:State
					action { //it:State
						 robotLibero=false 
									indoorLibera=false	
						println("Robot move to in")
						delay(1000) 
					}
					 transition( edgeName="goto",targetState="receipt", cond=doswitch() )
				}	 
				state("receipt") { //this:State
					action { //it:State
						answer("carenter", "receipt", "receipt($PROGRESSIVO)"   )  
						forward("goto", "goto($PROGRESSIVO)" ,"parkmanagerservice" ) 
						 PROGRESSIVO++  
						updateResourceRep( "$PROGRESSIVO"  
						)
					}
					 transition(edgeName="t012",targetState="goto",cond=whenDispatch("goto"))
					transition(edgeName="t013",targetState="uscitalibera",cond=whenEvent("uscitalibera"))
				}	 
				state("goto") { //this:State
					action { //it:State
						 robotLibero=false  
						if( checkMsgContent( Term.createTerm("goto(V)"), Term.createTerm("goto(ST)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var ST = payloadArg(0) 
												println(ST)
								if(  ST.equals("home")  
								 ){println("Ric. gotohome")
								delay(1000) 
								println("ROBOT at HOME")
								 robotLibero=true  
								}
								else
								 { var POS = payloadArg(0)  
								 println("ROBOT $ST move to $POS")
								  indoorLibera=true  
								 println("goto home")
								 forward("goto", "goto(home)" ,"parkmanagerservice" ) 
								 }
						}
					}
					 transition(edgeName="t014",targetState="goto",cond=whenDispatch("goto"))
					transition(edgeName="t015",targetState="acceptin",cond=whenEvent("acceptin"))
					transition(edgeName="t016",targetState="acceptout",cond=whenRequest("acceptout"))
					transition(edgeName="t017",targetState="movetoout",cond=whenDispatch("movetoout"))
					transition(edgeName="t018",targetState="uscitalibera",cond=whenEvent("uscitalibera"))
					transition(edgeName="t019",targetState="timeout",cond=whenEvent("timeout"))
				}	 
				state("movetoslotout") { //this:State
					action { //it:State
						 robotLibero=false  
						if( checkMsgContent( Term.createTerm("movetoslotout(V)"), Term.createTerm("movetoslotout(POS)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var POS = payloadArg(0)  
								println("ROBOT move to $POS")
								delay(2000) 
						}
					}
					 transition( edgeName="goto",targetState="movetoout", cond=doswitch() )
				}	 
				state("movetoout") { //this:State
					action { //it:State
						println("movetoout")
						 outdoorLibera = false  
						delay(2000) 
						forward("goto", "goto(home)" ,"parkmanagerservice" ) 
						emit("arrivoauto", "arrivoauto" ) 
					}
					 transition(edgeName="t020",targetState="goto",cond=whenDispatch("goto"))
					transition(edgeName="t021",targetState="timeout",cond=whenEvent("timeout"))
				}	 
				state("acceptout") { //this:State
					action { //it:State
						println("acceptout")
						if(  outdoorLibera  
						 ){if( checkMsgContent( Term.createTerm("acceptout(V)"), Term.createTerm("acceptout(TOKENID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								  var T = payloadArg(0)  
								forward("findslot", "findslot($T)" ,"parkmanagerservice" ) 
								println("Slot $T")
						}
						answer("acceptout", "response", "response(true)"   )  
						}
						else
						 {answer("acceptout", "response", "response(false)"   )  
						 }
					}
					 transition(edgeName="t022",targetState="findslot",cond=whenDispatch("findslot"))
				}	 
				state("findslot") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("findslot(V)"), Term.createTerm("findslot(TOKEN)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var TOKEN = payloadArg(0)  
								println("findslot")
								forward("movetoslotout", "movetoslotout($TOKEN)" ,"parkmanagerservice" ) 
						}
					}
					 transition(edgeName="t023",targetState="movetoslotout",cond=whenDispatch("movetoslotout"))
				}	 
				state("uscitalibera") { //this:State
					action { //it:State
						 outdoorLibera = true  
						updateResourceRep( "$outdoorLibera"  
						)
					}
					 transition(edgeName="t024",targetState="acceptin",cond=whenEvent("acceptin"))
					transition(edgeName="t025",targetState="goto",cond=whenDispatch("goto"))
					transition(edgeName="t026",targetState="informin",cond=whenDispatch("informin"))
					transition(edgeName="t027",targetState="acceptin",cond=whenEvent("acceptin"))
					transition(edgeName="t028",targetState="movetoin",cond=whenRequest("carenter"))
				}	 
				state("timeout") { //this:State
					action { //it:State
						println("ALARM")
					}
					 transition(edgeName="t029",targetState="acceptin",cond=whenEvent("acceptin"))
					transition(edgeName="t030",targetState="goto",cond=whenDispatch("goto"))
					transition(edgeName="t031",targetState="informin",cond=whenDispatch("informin"))
					transition(edgeName="t032",targetState="acceptin",cond=whenEvent("acceptin"))
					transition(edgeName="t033",targetState="movetoin",cond=whenRequest("carenter"))
				}	 
			}
		}
}
