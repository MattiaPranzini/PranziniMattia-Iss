/* Generated by AN DISI Unibo */ 
package it.unibo.thermometer

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Thermometer ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var TEMPERATURA = 20
				var allarme = false
				var soglia = 35
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						 TEMPERATURA = kotlin.random.Random.nextInt(15,50)		
						forward("temperatura", "temperatura($TEMPERATURA)" ,"managerservice" ) 
						println("		TRASMETTO TEMP")
						if(  TEMPERATURA>=soglia && !allarme  
						 ){ allarme = true  
						updateResourceRep( "allarme"  
						)
						emit("tempalarmon", "tempalarmon($TEMPERATURA)" ) 
						}
						if(  TEMPERATURA<soglia && allarme  
						 ){ allarme = false  
						updateResourceRep( "allarme"  
						)
						emit("tempalarmoff", "tempalarmoff" ) 
						}
						delay(2000) 
					}
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
			}
		}
}
