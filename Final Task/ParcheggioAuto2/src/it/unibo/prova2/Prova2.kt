/* Generated by AN DISI Unibo */ 
package it.unibo.prova2

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Prova2 ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				val mapname     = "mappaParcheggio"  		 
				var Myself      = myself   
				var CurrentPlannedMove = "" 
				var RobotType     = "" 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						unibo.robot.robotSupport.create(myself ,"basicrobotConfig.json" )
						 RobotType = unibo.robot.robotSupport.robotKind  
						updateResourceRep( "basicrobot(start)"  
						)
						itunibo.planner.plannerUtil.initAI(  )
						println("&&&  trolley loads the parking map from the given file ...")
						itunibo.planner.plannerUtil.loadRoomMap( "$mapname"  )
						itunibo.planner.plannerUtil.showMap(  )
						itunibo.planner.plannerUtil.showCurrentRobotState(  )
						pathexecutil.register( Myself  )
					}
					 transition( edgeName="goto",targetState="moveToIndoor", cond=doswitch() )
				}	 
				state("moveToIndoor") { //this:State
					action { //it:State
						itunibo.planner.plannerUtil.planForGoal( "5", "0"  )
						  CurrentPlannedMove = itunibo.planner.plannerUtil.getNextPlannedMove() 
						
						  		 	while(CurrentPlannedMove.length>0){
						  		 		println("MOSSa $CurrentPlannedMove")
						  		 		itunibo.planner.plannerUtil.updateMap("$CurrentPlannedMove")
						if(  CurrentPlannedMove.equals("w") || CurrentPlannedMove.equals("s")  
						 ){unibo.robot.robotSupport.move( "$CurrentPlannedMove"  )
						delay(400) 
						unibo.robot.robotSupport.move( "h"  )
						}
						else
						 {unibo.robot.robotSupport.move( "$CurrentPlannedMove"  )
						 }
								
						  		 		CurrentPlannedMove = itunibo.planner.plannerUtil.getNextPlannedMove()
						  		 	}
						  		 	
						  		 	
						itunibo.planner.plannerUtil.planForGoal( "1", "1"  )
						  CurrentPlannedMove = itunibo.planner.plannerUtil.getNextPlannedMove() 
						
						  		 	while(CurrentPlannedMove.length>0){
						  		 		println("MOSSa $CurrentPlannedMove")
						  		 		itunibo.planner.plannerUtil.updateMap("$CurrentPlannedMove")
						if(  CurrentPlannedMove.equals("w") || CurrentPlannedMove.equals("s")  
						 ){unibo.robot.robotSupport.move( "$CurrentPlannedMove"  )
						delay(400) 
						unibo.robot.robotSupport.move( "h"  )
						}
						else
						 {unibo.robot.robotSupport.move( "$CurrentPlannedMove"  )
						 }
								
						  		 		CurrentPlannedMove = itunibo.planner.plannerUtil.getNextPlannedMove()
						  		 	}
						  		 	
						  		 	
					}
				}	 
			}
		}
}
