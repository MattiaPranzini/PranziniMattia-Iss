/* Generated by AN DISI Unibo */ 
package it.unibo.door

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Door ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var robotLibero = true
				var outdoorLibera = true
				var postiLiberi = 6
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Stato 0 initial")
					}
					 transition(edgeName="t05",targetState="uscita",cond=whenDispatch("uscita"))
					transition(edgeName="t06",targetState="ingresso",cond=whenDispatch("ingresso"))
				}	 
				state("uscita") { //this:State
					action { //it:State
						println("Uscita")
						if(  robotLibero==true  
						 ){if( checkMsgContent( Term.createTerm("uscita(token)"), Term.createTerm("uscita(token)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var token = payloadArg(0)  
						}
						 robotLibero = false  
						updateResourceRep("$robotLibero" 
						)
						println("Robot occupato, carica auto e la sposta in uscita.")
						delay(500) 
						forward("outdoor", "outdoor(1)" ,"door" ) 
						}
						else
						 {println("Uscita, ROCCUPATO")
						 forward("uscita", "uscita(1)" ,"door" ) 
						 }
					}
					 transition(edgeName="t07",targetState="outdoor",cond=whenDispatch("outdoor"))
				}	 
				state("outdoor") { //this:State
					action { //it:State
						
									robotLibero = true
									outdoorLibera = false
									postiLiberi = postiLiberi+1
						updateResourceRep("$postiLiberi" 
						)
						updateResourceRep("$robotLibero" 
						)
						updateResourceRep("$outdoorLibera" 
						)
						println("Robot libero, uscita occupata")
						delay(500) 
					}
					 transition( edgeName="goto",targetState="liberaUscita", cond=doswitch() )
				}	 
				state("liberaUscita") { //this:State
					action { //it:State
						
									var outdoorLibera = true
						println("Robot libero, uscita libera.")
						delay(1000) 
					}
					 transition(edgeName="t08",targetState="uscita",cond=whenDispatch("uscita"))
					transition(edgeName="t09",targetState="ingresso",cond=whenDispatch("ingresso"))
				}	 
				state("ingresso") { //this:State
					action { //it:State
						println("Ingresso")
						
									postiLiberi = postiLiberi-1
						updateResourceRep("$postiLiberi" 
						)
						if(  robotLibero==true  
						 ){println("Ingresso, RL")
						
										robotLibero=false
						updateResourceRep("$robotLibero" 
						)
						delay(500) 
						forward("park", "park(1)" ,"door" ) 
						}
						else
						 {println("Ingresso, ROCCUPATO")
						 forward("ingresso", "ingresso(1)" ,"door" ) 
						 }
					}
					 transition(edgeName="t010",targetState="ingresso",cond=whenDispatch("ingresso"))
					transition(edgeName="t011",targetState="park",cond=whenDispatch("park"))
				}	 
				state("park") { //this:State
					action { //it:State
						
									robotLibero=true
						updateResourceRep("$robotLibero" 
						)
						println("PARCHEGGIATO!")
						delay(1000) 
					}
					 transition(edgeName="t012",targetState="uscita",cond=whenDispatch("uscita"))
					transition(edgeName="t013",targetState="ingresso",cond=whenDispatch("ingresso"))
				}	 
			}
		}
}
